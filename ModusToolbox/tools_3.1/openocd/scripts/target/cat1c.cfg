#
# Copyright (C) <2019-2022>
#   <Cypress Semiconductor Corporation (an Infineon company)>
#
# Configuration script for CAT1C family of microcontrollers.
#
# Reset configuration - use hardware XRES pin
# If this line is commented-out OpenOCD will use SYSRESETREQ to reset the CM0+ core and
# all peripherals. This will also reset CM7 cores.

#reset_config srst_only connect_deassert_srst

# Defines the name of the Target and allows to override it from the command line
global _CHIPNAME
if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME cat1c
}

source [find target/swj-dp.tcl]
source [find target/mxs40/mxs40_common.cfg]

if { [info exists WORKAREAADDR] } {
	set _WA_ADDR $WORKAREAADDR
	unset WORKAREAADDR
} else {
	set _WA_ADDR 0x28000800
}

if { [info exists WORKAREASIZE] } {
	set _WA_SIZE $WORKAREASIZE
	unset WORKAREASIZE
} else {
	set _WA_SIZE 0x10000
}

if { $_ENABLE_ACQUIRE } {
	kitprog3 acquire_config on 3 0 2
}

global _ENABLE_CM71
if { [info exists ENABLE_CM71] } {
	set _ENABLE_CM71 $ENABLE_CM71
} else {
	set _ENABLE_CM71 1
}

global _QSPI_FLASHLOADER
if { [info exists QSPI_FLASHLOADER] } {
	set _QSPI_FLASHLOADER $QSPI_FLASHLOADER
} else {
	set _QSPI_FLASHLOADER ../flm/cypress/cat1c/CAT1C_SMIF.FLM
}

global TARGET
set TARGET $_CHIPNAME.cpu
swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu -power-down-on-quit

# Set CSW[27], which according to ARM ADI v5 appendix E1.4 maps to AHB signal
# HPROT[3], which according to AMBA AHB/ASB/APB specification chapter 3.7.3
# makes the data access cacheable. This allows reading and writing data in the
# CPU cache from the debugger, which is far more useful than going straight to
# RAM when operating on typical variables, and is generally no worse when
# operating on special memory locations.
$_CHIPNAME.dap apsel 2
$_CHIPNAME.dap apcsw [expr {(1 << 24) | (1 << 25) | (1 << 27) | (1 << 29) | (1 << 31)}]

if { $_ENABLE_CM71 } {
	$_CHIPNAME.dap apsel 3
	$_CHIPNAME.dap apcsw [expr {(1 << 24) | (1 << 25) | (1 << 27) | (1 << 29) | (1 << 31)}]
}

proc enable_cm7x {} {
	global RESET_MODE
	global _ENABLE_CM71

	# Exit if $target is supposed to be running after Reset
	if { [info exists RESET_MODE] && $RESET_MODE eq "run" } return

	set REG_SRSS_CLK_ROOT_SELECT1      0x40261244
	set REG_CPUSS_CM7_0_CTL            0x4020000c
	set REG_CPUSS_CM7_1_CTL            0x4020040c
	set REG_CPUSS_CM7_0_PWR_CTL        0x40201200
	set REG_CPUSS_CM7_1_PWR_CTL        0x40201210

	set VAL_SRSS_CLK_ROOT_SELECT       0x80000000
	set VAL_CPUSS_CM7_x_PWR_CTL_RESET  0x05fa0001
	set VAL_CPUSS_CM7_x_PWR_CTL_ENABLE 0x05fa0003
	set MSK_CPUSS_CM7_x_CTL_CPU_WAIT   0x00000010

	# enable CLK_HF1 (CM7_0, CM7_1)
	# mww $REG_SRSS_CLK_ROOT_SELECT1 $VAL_SRSS_CLK_ROOT_SELECT

	if { [mrw $REG_CPUSS_CM7_0_PWR_CTL] != 0xFA050003 } {
		echo "Info : Enabling the CM7_0 CPU..."

		# Set init values for "DTCM Enable and RMW", enable DTCM AHB Slave Port
		mww $REG_CPUSS_CM7_0_CTL [expr { [mrw $REG_CPUSS_CM7_0_CTL] | 0x00800a00 }]
		mww $REG_CPUSS_CM7_0_PWR_CTL $VAL_CPUSS_CM7_x_PWR_CTL_ENABLE
		# wait some time, so that CM7 Power FSM can reach new state ("ENABLED")
		sleep 3
		mww $REG_CPUSS_CM7_0_PWR_CTL $VAL_CPUSS_CM7_x_PWR_CTL_RESET
		# wait some time, so that CM7 Power FSM can reach new state
		# ("DBG_RSTOFF" -> CM7 is in a special state like in M4 based TVII, full return to "RESET" is prevented because of CSYSPWRUPREQ)
		sleep 3
		# Clear CPU_WAIT, let CM7 execute the endless "WFI" loop in SROM
		mww $REG_CPUSS_CM7_0_CTL [expr {[mrw $REG_CPUSS_CM7_0_CTL] & (~($MSK_CPUSS_CM7_x_CTL_CPU_WAIT)) }]
	}

	if { $_ENABLE_CM71 } {
		if { [mrw $REG_CPUSS_CM7_1_PWR_CTL] != 0xFA050003 } {
			echo "Info : Enabling the CM7_1 CPU..."

			# Set init values for "DTCM Enable and RMW", enable DTCM AHB Slave Port
			mww $REG_CPUSS_CM7_1_CTL [expr { [mrw $REG_CPUSS_CM7_1_CTL] | 0x00800a00 }]
			mww $REG_CPUSS_CM7_1_PWR_CTL $VAL_CPUSS_CM7_x_PWR_CTL_ENABLE
			# wait some time, so that CM7 Power FSM can reach new state ("ENABLED")
			sleep 3
			mww $REG_CPUSS_CM7_1_PWR_CTL $VAL_CPUSS_CM7_x_PWR_CTL_RESET
			# wait some time, so that CM7 Power FSM can reach new state
			# ("DBG_RSTOFF" -> CM7 is in a special state like in M4 based TVII, full return to "RESET" is prevented because of CSYSPWRUPREQ)
			sleep 3
			# Clear CPU_WAIT, let CM7 execute the endless "WFI" loop in SROM
			mww $REG_CPUSS_CM7_1_CTL [expr {[mrw $REG_CPUSS_CM7_1_CTL] & (~($MSK_CPUSS_CM7_x_CTL_CPU_WAIT)) }]
		}
	}
}

target create ${TARGET}.cm0  cortex_m -dap $_CHIPNAME.dap -ap-num 1 -coreid 0
${TARGET}.cm0 configure -work-area-phys $_WA_ADDR -work-area-size $_WA_SIZE -work-area-backup 0
${TARGET}.cm0 cortex_m reset_config sysresetreq
${TARGET}.cm0 configure -event examine-end "cy_get_set_device_param cat1c ${_CHIPNAME}_main_cm0 ${_CHIPNAME}_work_cm0; enable_cm7x"
${TARGET}.cm0 configure -event reset-deassert-post "mxs40_reset_deassert_post cat1c ${TARGET}.cm0; enable_cm7x"

flash bank ${_CHIPNAME}_main_cm0		cat1c 0x10000000 0 0 0 ${TARGET}.cm0
flash bank ${_CHIPNAME}_work_cm0		cat1c 0x14000000 0 0 0 ${TARGET}.cm0
flash bank ${_CHIPNAME}_super_cm0		cat1c 0x17000000 0 0 0 ${TARGET}.cm0
flash bank ${_CHIPNAME}_efuse_cm0		cat1c_efuse 0x90700000 1024 1 1 ${TARGET}.cm0 external

target create ${TARGET}.cm70 cortex_m -dap $_CHIPNAME.dap -ap-num 2 -coreid 1
${TARGET}.cm70 configure -work-area-phys $_WA_ADDR -work-area-size $_WA_SIZE -work-area-backup 0
${TARGET}.cm70 configure -event reset-assert {}
${TARGET}.cm70 configure -event reset-deassert-post "mxs40_reset_deassert_post cat1c ${TARGET}.cm70"

flash bank ${_CHIPNAME}_main_cm70		virtual 0x10000000 0 0 0 ${TARGET}.cm70 ${_CHIPNAME}_main_cm0
flash bank ${_CHIPNAME}_work_cm70		virtual 0x14000000 0 0 0 ${TARGET}.cm70 ${_CHIPNAME}_work_cm0
flash bank ${_CHIPNAME}_super_cm70		virtual 0x17000000 0 0 0 ${TARGET}.cm70 ${_CHIPNAME}_super_cm0
flash bank ${_CHIPNAME}_efuse_cm70		virtual 0x90700000 1024 1 1 ${TARGET}.cm70 ${_CHIPNAME}_efuse_cm0 external

if { $_ENABLE_CM71 } {
	target create ${TARGET}.cm71 cortex_m -dap $_CHIPNAME.dap -ap-num 3 -coreid 2
	${TARGET}.cm71 configure -work-area-phys $_WA_ADDR -work-area-size $_WA_SIZE -work-area-backup 0
	${TARGET}.cm71 configure -event reset-assert {}
	${TARGET}.cm71 configure -event reset-deassert-post "mxs40_reset_deassert_post cat1c ${TARGET}.cm71"

	flash bank ${_CHIPNAME}_main_cm71		virtual 0x10000000 0 0 0 ${TARGET}.cm71 ${_CHIPNAME}_main_cm0
	flash bank ${_CHIPNAME}_work_cm71		virtual 0x14000000 0 0 0 ${TARGET}.cm71 ${_CHIPNAME}_work_cm0
	flash bank ${_CHIPNAME}_super_cm71		virtual 0x17000000 0 0 0 ${TARGET}.cm71 ${_CHIPNAME}_super_cm0
	flash bank ${_CHIPNAME}_efuse_cm71		virtual 0x90700000 1024 1 1 ${TARGET}.cm71 ${_CHIPNAME}_efuse_cm0 external
}

targets ${TARGET}.cm0

if {[using_jtag]} {
	jtag newtap $_CHIPNAME bs -irlen 4 -expected-id 0
}

###############################################################################
# Handles GDB extended 'restart' command
###############################################################################
proc ocd_gdb_restart {target} {
	if [string match "*cm0" $target ] {
		reset init
		cat1c reset_halt sysresetreq
	} else {
		reset run
		cat1c reset_halt sysresetreq
	}
}

# example of qspi_config.cfg
#set SMIF_BANKS {
#  1 {addr 0x60000000 size 0x10000 psize 0x100 esize 0x1000}
#  2 {addr 0x60010000 size 0x10000 psize 0x100 esize 0x1000}
#  3 {addr 0x60020000 size 0x10000 psize 0x100 esize 0x1000}
#  4 {addr 0x60030000 size 0x10000 psize 0x100 esize 0x1000}
#}

catch {source [find qspi_config.cfg]}

if { [info exists SMIF_BANKS] } {

	set num_banks [array size SMIF_BANKS]
	set bank_param ""
	if { $num_banks > 1 } {
		set bank_param "prefer_sector_erase"
	}

	foreach {key value} [array get SMIF_BANKS] {
		flash bank ${_CHIPNAME}_smif${key}_cm0 cmsis_flash $value(addr) $value(size) 4 4 ${TARGET}.cm0 ${_QSPI_FLASHLOADER} 0x800 {*}$bank_param
		flash bank ${_CHIPNAME}_smif${key}_cm70 virtual $value(addr) $value(size) 0 0 ${TARGET}.cm70 ${_CHIPNAME}_smif${key}_cm0
		if { $_ENABLE_CM71 } {
			flash bank ${_CHIPNAME}_smif${key}_cm71 virtual $value(addr) $value(size) 0 0 ${TARGET}.cm71 ${_CHIPNAME}_smif${key}_cm0
		}
	}
}

gdb_smart_program enable

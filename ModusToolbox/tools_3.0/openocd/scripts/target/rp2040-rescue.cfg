# SPDX-License-Identifier: GPL-2.0-or-later

transport select swd

adapter speed 1000

source [find target/swj-dp.tcl]

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME rp2040
}

if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	set _CPUTAPID 0x01002927
}

swj_newdap $_CHIPNAME cpu -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap.rescue -chain-position $_CHIPNAME.cpu -dp-id $_CPUTAPID -instance-id 0xf -ignore-syspwrupack

# Have to init before we can do dpreg commands
init

# The rescue debug port uses the AP CTRL/STAT bit DBGPWRUPREQ to reset the
# PSM (power on state machine) of the RP2040 with a flag set in the
# VREG_AND_POR_CHIP_RESET register. Once the reset is released
# (by clearing the DBGPWRUPREQ flag), the bootrom will run, see this flag,
# and halt. Allowing the user to load some fresh code, rather than loading
# the potentially broken code stored in flash

local_echo off

set ap_ctrl_stat [$_CHIPNAME.dap.rescue dpreg 0x4]
echo "AP CTRL/STAT before: [format 0x%08X $ap_ctrl_stat]"

# Clear DBGPWRUPREQ
$_CHIPNAME.dap.rescue dpreg 0x4 0x00000000

# Verifying CTRL/STAT is 0
set ap_ctrl_stat [$_CHIPNAME.dap.rescue dpreg 0x4]
echo "AP CTRL/STAT after:  [format 0x%08X $ap_ctrl_stat]"

if { ($ap_ctrl_stat & 0xF0000000) == 0 } {
	echo "Unlock succeeded, now attach a debugger to your RP2040 and load some code"
} else {
	echo "Unlock failed!"
}

exit

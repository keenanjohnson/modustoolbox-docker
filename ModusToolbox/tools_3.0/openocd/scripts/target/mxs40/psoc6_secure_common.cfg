#
# Copyright (C) <2019-2021>
#   <Cypress Semiconductor Corporation (an Infineon company)>
#
# Common configuration for PSoC 64 family of microcontrollers.
# PSoC 64 is a dual-core device with CM0+ and CM4 cores. Both cores share
# the same Flash/RAM/MMIO address space.
#

source [find mem_helper.tcl]
source [find target/mxs40/cympn_parser.cfg]
source [find target/mxs40/cy_get_set_device_param.cfg]

adapter speed 2000
adapter srst delay 0
adapter srst pulse_width 5

if {[using_jtag]} {
	puts stderr "JTAG transport not supported by selected target, please switch to SWD"
	shutdown
}

proc check_die_matches_driver { DIE SERIES } {
	set MXS40_DIE_CONFIG_DICT [dict create \
		PSoC6ABLE2 psoc6.cfg       \
		PSoC6A256K psoc6_256k.cfg  \
		PSoC6A512K psoc6_512k.cfg  \
		PSoC6A2M   psoc6_2m.cfg    \
	]

	global MXS40_TARGET_DIE
	global wrong_cfg_msg

	if {![info exists MXS40_TARGET_DIE]} return
	set is_psoc64 [string equal -nocase $SERIES "PSoC_64"]

	if { $DIE != $MXS40_TARGET_DIE || !$is_psoc64 } {
		if { [info exists MXS40_DIE_CONFIG_DICT($DIE)] } {
			set wrong_cfg_msg \"$MXS40_DIE_CONFIG_DICT($DIE)\"
			if { $is_psoc64 } {
				set wrong_cfg_msg [regsub {\.} $wrong_cfg_msg {_secure.}]
			}
		} else {
			set wrong_cfg_msg "proper"
		}
	}
}

global _ENABLE_ACQUIRE
global _ENABLE_POWER_SUPPLY
if { [adapter name] eq "kitprog3" } {
	if { [info exists ENABLE_ACQUIRE] } {
		set _ENABLE_ACQUIRE $ENABLE_ACQUIRE
	} else {
		set _ENABLE_ACQUIRE 1
	}

	if { [info exists ENABLE_POWER_SUPPLY] } {
		set _ENABLE_POWER_SUPPLY $ENABLE_POWER_SUPPLY
	} else {
		set _ENABLE_POWER_SUPPLY 0
	}
} else {
	set _ENABLE_ACQUIRE  0
	set _ENABLE_POWER_SUPPLY 0
	echo "** Test Mode acquire not supported by selected adapter"
}

if { $_ENABLE_POWER_SUPPLY } {
	echo "** Enabling target power ($_ENABLE_POWER_SUPPLY mV) \"set ENABLE_POWER_SUPPLY 0\" to disable"
	kitprog3 power_config on $_ENABLE_POWER_SUPPLY
}

set show_device_info_runned 0
proc show_device_info { target main_region_name } {
	global show_device_info_runned
	global _FLASH_DRIVER_NAME
	global _FLASH_RESTRICTION_SIZE

	# Exit if target was not examined
	if { [$target was_examined] == 0 } { return }

	if {$show_device_info_runned == 0} {
		echo "***************************************"
		echo "** Use overriden Main Flash size, kb: [expr {$_FLASH_RESTRICTION_SIZE >> 10}]"
		cyp_get_mpn_work_main_size "psoc6"
		set fb_ver [show_flash_boot_ver $_FLASH_DRIVER_NAME]
		if {[string match "4.0.0.*" $fb_ver]} {
			puts stderr "Warn: Pre-production version of device is detected which is incompatible with this software"
			puts stderr "Warn: Please contact Cypress for new production parts"
		}
		echo "***************************************"
		set show_device_info_runned 1

		global wrong_cfg_msg
		if { [info exist wrong_cfg_msg] && $wrong_cfg_msg != "" } {
			set cfg_file $wrong_cfg_msg
			puts stderr "*******************************************************************************"
			puts stderr "* The detected device does not match the configuration file in use."
			puts stderr "* Flash programming will not work. Please use the $cfg_file"
			puts stderr "* configuration file, or attach a kit that matches the configuration file."
			puts stderr "*******************************************************************************"
			terminate
		}
	}
}

if { [info exists POWERUP_DELAY] } {
	set _POWERUP_DELAY $POWERUP_DELAY
} else {
	set _POWERUP_DELAY 5000
}
echo "** Using POWERUP_DELAY: $_POWERUP_DELAY ms"

proc power_dropout {} {
	global _POWERUP_DELAY
	echo "** Waiting for target to boot ($_POWERUP_DELAY ms), use 'set POWERUP_DELAY' to override"
	sleep $_POWERUP_DELAY
}

if { [info exists ENABLE_WFLASH] } {
	set _ENABLE_WFLASH $ENABLE_WFLASH
} else {
	set _ENABLE_WFLASH 1
}

if { [info exists ENABLE_SFLASH] } {
	set _ENABLE_SFLASH $ENABLE_SFLASH
} else {
	set _ENABLE_SFLASH 0
}

if { [info exists ENABLE_EFUSE] } {
	set _ENABLE_EFUSE $ENABLE_EFUSE
} else {
	set _ENABLE_EFUSE 0
}

if {$_ENABLE_EFUSE} {
	echo "** eFuse Flash Bank enabled"
}

if { ![info exists TARGET_AP] } {
	set TARGET_AP "sys_ap"
	echo "** TARGET_AP not defined, using 'sys_ap' by default"
}
echo "** Using TARGET_AP: $TARGET_AP"

if { $TARGET_AP eq "sys_ap" } {
	set _ENABLE_SYSAP 1
	set _ENABLE_CM0   0
	set _ENABLE_CM4   0
} elseif { $TARGET_AP eq "cm0_ap" } {
	set _ENABLE_SYSAP 1
	set _ENABLE_CM0   1
	set _ENABLE_CM4   0
} elseif { $TARGET_AP eq "cm4_ap" } {
	set _ENABLE_SYSAP 1
	set _ENABLE_CM0   0
	set _ENABLE_CM4   1
} elseif { $TARGET_AP eq "cm0_cm4_ap" } {
	set _ENABLE_SYSAP 1
	set _ENABLE_CM0   1
	set _ENABLE_CM4   1
} else {
	puts stderr "Error: Invalid TARGET_AP: $TARGET_AP, please use one of the following: sys_ap, cm0_ap, cm4_ap, cm0_cm4_ap"
	shutdown
}

if { [info exists ACQUIRE_TIMEOUT] } {
	set _ACQUIRE_TIMEOUT $ACQUIRE_TIMEOUT
} else {
	set _ACQUIRE_TIMEOUT 15000
}

if { $_ACQUIRE_TIMEOUT > 30000 } {
	set _ACQUIRE_TIMEOUT 30000
}

echo "** Using ACQUIRE_TIMEOUT: $_ACQUIRE_TIMEOUT ms"

set ACQ_AP_DICT [dict create]
dict set ACQ_AP_DICT sys_ap 0
dict set ACQ_AP_DICT cm0_ap 1
dict set ACQ_AP_DICT cm4_ap 2
dict set ACQ_AP_DICT cm0_cm4_ap 2

if { $_ENABLE_ACQUIRE } {
	echo "** Auto-acquire enabled, use \"set ENABLE_ACQUIRE 0\" to disable"
	kitprog3 acquire_config on 2 0 2 [expr {$_ACQUIRE_TIMEOUT / 1000}] $ACQ_AP_DICT($TARGET_AP)
} elseif { [adapter name] eq "kitprog3" } {
	# Just disable HW acquisition during 'init', this allows to use proper Reset in Attach configurations
	echo "** Auto-acquire disabled, however, it will be used for reset processing"
	kitprog3 acquire_config off 2 0 2 [expr {$_ACQUIRE_TIMEOUT / 1000}] $ACQ_AP_DICT($TARGET_AP)
}

global TARGET
set TARGET $_CHIPNAME.cpu
swd newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu -power-down-on-quit

proc init_reset { mode } {
	global _RESET_MODE
	set _RESET_MODE $mode

	if {[using_jtag]} {
		jtag arp_init-reset
	}
}

proc reset_deassert_post { target } {
	global _RESET_MODE
	global _ACQUIRE_TIMEOUT
	global _MAGIC_NUMBER_ADDR
	global TARGET_AP

	switch $TARGET_AP {
		sys_ap     { if { $target != "sysap" } return }
		cm0_ap     { if { $target != "cm0"   } return }
		cm4_ap     { if { $target != "cm4"   } return }
		cm0_cm4_ap { if { $target != "cm4"   } return }
		default    { error "Invalid TARGET_AP: $TARGET_AP" }
	}

	if {$_RESET_MODE == "run"} {
		psoc6 secure_acquire $_MAGIC_NUMBER_ADDR run no_handshake $_ACQUIRE_TIMEOUT
		if { $TARGET_AP == "cm0_cm4_ap" } {
			set prev_tgt [target current]
			targets psoc64.cpu.cm0
			psoc6 secure_acquire $_MAGIC_NUMBER_ADDR run no_handshake $_ACQUIRE_TIMEOUT
			targets $prev_tgt
		}
	} else {
		# Always use KP3's HW acquisition, even if ENABLE_ACQUIRE=0, we are doing Reset anyway
		if { [adapter name] eq "kitprog3" } {
			kitprog3 acquire_psoc
		}

		psoc6 secure_acquire $_MAGIC_NUMBER_ADDR halt handshake $_ACQUIRE_TIMEOUT
		if { $TARGET_AP == "cm0_cm4_ap" } {
			set prev_tgt [target current]
			targets psoc64.cpu.cm0
			psoc6 secure_acquire $_MAGIC_NUMBER_ADDR halt handshake $_ACQUIRE_TIMEOUT
			targets $prev_tgt
		}
	}
}

proc gdb_attach { target } {
	# PSoC64-1m with CyBootloader performs additional Reset of CM4
	# right after acquisition in TestMode. This cause problems with
	# VSCode because gdb connects immediately after 'init' so CPU
	# halting fails. Adding short delay resolves the issue.
	sleep 250

	$target arp_examine
	$target arp_poll
	$target arp_poll
	$target arp_halt
	$target arp_waitstate halted 1000
}

if { $_ENABLE_SYSAP } {
	target create ${TARGET}.sysap mem_ap -dap $_CHIPNAME.dap -ap-num 0 -coreid 255
	${TARGET}.sysap configure -work-area-phys $_WORKAREAADDR -work-area-size $_WORKAREASIZE -work-area-backup 0
	${TARGET}.sysap configure -event examine-end "show_device_info ${TARGET}.sysap main_sysap"
	${TARGET}.sysap configure -event reset-deassert-post "reset_deassert_post sysap"
}

if { $_ENABLE_CM0 } {
	target create ${TARGET}.cm0 cortex_m -dap $_CHIPNAME.dap -ap-num 1 -coreid 1 -defer-examine
	${TARGET}.cm0 configure -work-area-phys $_WORKAREAADDR_CM -work-area-size $_WORKAREASIZE_CM -work-area-backup 0
	${TARGET}.cm0 configure -event examine-end "show_device_info ${TARGET}.sysap main_cm0"
	${TARGET}.cm0 configure -event reset-deassert-post "reset_deassert_post cm0"
	${TARGET}.cm0 configure -event gdb-start "mww 0x40260100 0"
	${TARGET}.cm0 configure -event gdb-attach "gdb_attach ${TARGET}.cm0"
}

if { $_ENABLE_CM4 } {
	target create ${TARGET}.cm4 cortex_m -dap $_CHIPNAME.dap -ap-num 2 -coreid 2 -defer-examine
	${TARGET}.cm4 configure -work-area-phys $_WORKAREAADDR_CM -work-area-size $_WORKAREASIZE_CM -work-area-backup 0
	${TARGET}.cm4 configure -event examine-end "show_device_info ${TARGET}.sysap main_cm4"
	${TARGET}.cm4 configure -event reset-deassert-post "reset_deassert_post cm4"
	${TARGET}.cm4 configure -event gdb-start "mww 0x40260100 0"
	${TARGET}.cm4 configure -event gdb-attach "gdb_attach ${TARGET}.cm4"
}

if { $TARGET_AP eq "sys_ap" } {

						   flash bank ${_CHIPNAME}_main_sysap   ${_FLASH_DRIVER_NAME}       0x10000000 0 0 0    ${TARGET}.sysap external
	if {$_ENABLE_WFLASH} { flash bank ${_CHIPNAME}_work_sysap   ${_FLASH_DRIVER_NAME}       0x14000000 0 0 0    ${TARGET}.sysap external }
	if {$_ENABLE_SFLASH} { flash bank ${_CHIPNAME}_sflash_sysap ${_FLASH_DRIVER_NAME}       0x16000000 0 0 0    ${TARGET}.sysap external }
	if {$_ENABLE_EFUSE}  { flash bank ${_CHIPNAME}_efuse_sysap  ${_FLASH_DRIVER_NAME}_efuse 0x90700000 1024 1 1 ${TARGET}.sysap external }

	psoc6 set_region_size ${_CHIPNAME}_main_sysap $_FLASH_RESTRICTION_SIZE

} elseif { $TARGET_AP eq "cm0_ap" } {

						   flash bank ${_CHIPNAME}_main_cm0     ${_FLASH_DRIVER_NAME}       0x10000000 0 0 0    ${TARGET}.cm0   external
						   flash bank ${_CHIPNAME}_main_sysap   virtual                     0x10000000 0 0 0    ${TARGET}.sysap ${_CHIPNAME}_main_cm0
	if {$_ENABLE_WFLASH} { flash bank ${_CHIPNAME}_work_cm0     ${_FLASH_DRIVER_NAME}       0x14000000 0 0 0    ${TARGET}.cm0   external
						   flash bank ${_CHIPNAME}_work_sysap   virtual                     0x14000000 0 0 0    ${TARGET}.sysap ${_CHIPNAME}_work_cm0 }
	if {$_ENABLE_SFLASH} { flash bank ${_CHIPNAME}_sflash_sysap ${_FLASH_DRIVER_NAME}       0x16000000 0 0 0    ${TARGET}.sysap external
						   flash bank ${_CHIPNAME}_sflash_cm0   virtual                     0x16000000 0 0 0    ${TARGET}.cm0   ${_CHIPNAME}_sflash_sysap }
	if {$_ENABLE_EFUSE}  { flash bank ${_CHIPNAME}_efuse_sysap  ${_FLASH_DRIVER_NAME}_efuse 0x90700000 1024 1 1 ${TARGET}.sysap external
						   flash bank ${_CHIPNAME}_efuse_cm0    virtual                     0x90700000 1024 1 1 ${TARGET}.cm0   ${_CHIPNAME}_efuse_sysap }

	if { ![info exists DISABLE_SMIF] } {
		flash bank ${_CHIPNAME}_smif_cm0   cmsis_flash 0x18000000 0 4 4 ${TARGET}.cm0   ../flm/cypress/cat1a/$_QSPI_FLASHLOADER 0x1000 prefer_sector_erase
		flash bank ${_CHIPNAME}_smif_sysap virtual     0x18000000 0 4 4 ${TARGET}.sysap ${_CHIPNAME}_smif_cm0 }

	psoc6 set_region_size ${_CHIPNAME}_main_cm0 $_FLASH_RESTRICTION_SIZE

} elseif { $TARGET_AP eq "cm4_ap" } {

						   flash bank ${_CHIPNAME}_main_cm4     ${_FLASH_DRIVER_NAME}       0x10000000 0 0 0    ${TARGET}.cm4   external
						   flash bank ${_CHIPNAME}_main_sysap   virtual                     0x10000000 0 0 0    ${TARGET}.sysap ${_CHIPNAME}_main_cm4
	if {$_ENABLE_WFLASH} { flash bank ${_CHIPNAME}_work_cm4     ${_FLASH_DRIVER_NAME}       0x14000000 0 0 0    ${TARGET}.cm4   external
						   flash bank ${_CHIPNAME}_work_sysap   virtual                     0x14000000 0 0 0    ${TARGET}.sysap ${_CHIPNAME}_work_cm4 }
	if {$_ENABLE_SFLASH} { flash bank ${_CHIPNAME}_sflash_sysap ${_FLASH_DRIVER_NAME}       0x16000000 0 0 0    ${TARGET}.sysap external
						   flash bank ${_CHIPNAME}_sflash_cm4   virtual                     0x16000000 0 0 0    ${TARGET}.cm4   ${_CHIPNAME}_sflash_sysap }
	if {$_ENABLE_EFUSE}  { flash bank ${_CHIPNAME}_efuse_sysap  ${_FLASH_DRIVER_NAME}_efuse 0x90700000 1024 1 1 ${TARGET}.sysap external
						   flash bank ${_CHIPNAME}_efuse_cm4    virtual                     0x90700000 1024 1 1 ${TARGET}.cm4   ${_CHIPNAME}_efuse_sysap }

	if { ![info exists DISABLE_SMIF] } {
		flash bank ${_CHIPNAME}_smif_cm4   cmsis_flash 0x18000000 0 4 4 ${TARGET}.cm4   ../flm/cypress/cat1a/$_QSPI_FLASHLOADER 0x1000 prefer_sector_erase
		flash bank ${_CHIPNAME}_smif_sysap virtual     0x18000000 0 4 4 ${TARGET}.sysap ${_CHIPNAME}_smif_cm4 }

	psoc6 set_region_size ${_CHIPNAME}_main_cm4 $_FLASH_RESTRICTION_SIZE

} elseif { $TARGET_AP eq "cm0_cm4_ap" } {

						   flash bank ${_CHIPNAME}_main_cm0     ${_FLASH_DRIVER_NAME}       0x10000000 0 0 0    ${TARGET}.cm0   external
						   flash bank ${_CHIPNAME}_main_cm4     virtual                     0x10000000 0 0 0    ${TARGET}.cm4   ${_CHIPNAME}_main_cm0
						   flash bank ${_CHIPNAME}_main_sysap   virtual                     0x10000000 0 0 0    ${TARGET}.sysap ${_CHIPNAME}_main_cm0
	if {$_ENABLE_WFLASH} { flash bank ${_CHIPNAME}_work_cm0     ${_FLASH_DRIVER_NAME}       0x14000000 0 0 0    ${TARGET}.cm0   external
						   flash bank ${_CHIPNAME}_work_cm4     virtual                     0x14000000 0 0 0    ${TARGET}.cm4   ${_CHIPNAME}_work_cm0
						   flash bank ${_CHIPNAME}_work_sysap   virtual                     0x14000000 0 0 0    ${TARGET}.sysap ${_CHIPNAME}_work_cm0 }
	if {$_ENABLE_SFLASH} { flash bank ${_CHIPNAME}_sflash_sysap ${_FLASH_DRIVER_NAME}       0x16000000 0 0 0    ${TARGET}.sysap external
						   flash bank ${_CHIPNAME}_sflash_cm0   virtual                     0x16000000 0 0 0    ${TARGET}.cm0   ${_CHIPNAME}_sflash_sysap
						   flash bank ${_CHIPNAME}_sflash_cm4   virtual                     0x16000000 0 0 0    ${TARGET}.cm4   ${_CHIPNAME}_sflash_sysap }
	if {$_ENABLE_EFUSE}  { flash bank ${_CHIPNAME}_efuse_sysap  ${_FLASH_DRIVER_NAME}_efuse 0x90700000 1024 1 1 ${TARGET}.sysap external
						   flash bank ${_CHIPNAME}_efuse_cm0    virtual                     0x90700000 1024 1 1 ${TARGET}.cm0   ${_CHIPNAME}_efuse_sysap
						   flash bank ${_CHIPNAME}_efuse_cm4    virtual                     0x90700000 1024 1 1 ${TARGET}.cm4   ${_CHIPNAME}_efuse_sysap }

	if { ![info exists DISABLE_SMIF] } {
		flash bank ${_CHIPNAME}_smif_cm0   cmsis_flash 0x18000000 0 4 4 ${TARGET}.cm0   ../flm/cypress/cat1a/$_QSPI_FLASHLOADER 0x1000 prefer_sector_erase
		flash bank ${_CHIPNAME}_smif_sysap virtual     0x18000000 0 4 4 ${TARGET}.sysap ${_CHIPNAME}_smif_cm0
		flash bank ${_CHIPNAME}_smif_cm4   virtual     0x18000000 0 4 4 ${TARGET}.cm4   ${_CHIPNAME}_smif_cm0 }

	psoc6 set_region_size ${_CHIPNAME}_main_cm0 $_FLASH_RESTRICTION_SIZE

} else {
	puts stderr "Error: Invalid TARGET_AP: $TARGET_AP, please use one of the following: sys_ap, cm0_ap, cm4_ap, cm0_cm4_ap"
	shutdown
}

targets ${TARGET}.sysap
reset_config srst_only srst_gates_jtag

proc erase_all {} {
	lset banks [flash list]
	for {set i [expr {[llength $banks] - 1}]} { $i >= 0 } { set i [expr {$i - 1}]} {
		set bank [lindex $banks $i]
		if { $bank(base) == 0x10000000 || \
			 $bank(base) == 0x14000000 || \
			 $bank(base) == 0x18000000 } {
			 echo "Erasing flash bank @[format 0x%08X $bank(base)]..."
			 catch {flash erase_sector $i 0 last}
		}
	}
}

add_help_text erase_all "Erases all flash banks (in reverse order, for SMIF compatibility)"

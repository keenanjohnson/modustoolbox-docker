#
# Copyright (C) <2019-2021>
#   <Cypress Semiconductor Corporation (an Infineon company)>
#
# Common configuration for CYW20829 family of microcontrollers.
#

source [find target/swj-dp.tcl]
source [find target/mxs40/mxs40v2_common.cfg]

global _CHIPNAME
if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME cyw20829
}

if { [info exists WORKAREAADDR] } {
	set _WA_ADDR $WORKAREAADDR
	unset WORKAREAADDR
} else {
	# Top of RAM for devices with 64KB of RAM (0x20010000) - _WA_SIZE (0x8000) = 0x20008000)
	set _WA_ADDR 0x20008000
}

if { [info exists WORKAREASIZE] } {
	set _WA_SIZE $WORKAREASIZE
	unset WORKAREASIZE
} else {
	# TODO: 32KB is not enought for current loaders
	#set _WA_SIZE 0x8000
	set _WA_SIZE 0x10000
}

global _QSPI_FLASHLOADER
if { [info exists QSPI_FLASHLOADER] } {
	set _QSPI_FLASHLOADER $QSPI_FLASHLOADER
} else {
	set _QSPI_FLASHLOADER ../flm/cypress/cat1b/CYW208xx_SMIF.FLM
}

global TARGET
set TARGET $_CHIPNAME

###############################################################################
# SWJ settings
###############################################################################

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu -power-down-on-quit
# Turn on hprot[0] bit in SysAP's AP->CSW register to allow data writes via SysAP
$_CHIPNAME.dap apsel 0
$_CHIPNAME.dap apcsw [expr {1 << 24}]

if {[using_jtag]} {
	swj_newdap $_CHIPNAME bs -irlen 4
}

###############################################################################
# Reset / Acquire
###############################################################################

target create ${TARGET}.sysap  mem_ap   -dap $_CHIPNAME.dap -ap-num 0 -coreid 255
target create ${TARGET}.cm33ap mem_ap   -dap $_CHIPNAME.dap -ap-num 1 -coreid 255
target create ${TARGET}.cm33   cortex_m -dap $_CHIPNAME.dap -ap-num 1 -coreid 0
${TARGET}.cm33 configure -work-area-phys $_WA_ADDR -work-area-size $_WA_SIZE

# Only SRST reset works correctly, SYSRESETREQ + VC_CORERESET causes debug pins been
# left disconnected due to known silicon design limitation
reset_config srst_only
${TARGET}.cm33ap configure -event reset-assert {}
${TARGET}.cm33 configure -event reset-assert {}
${TARGET}.cm33 configure -event reset-deassert-post "mxs40v2_reset_deassert_post ${TARGET}.cm33"

$_CHIPNAME.dap configure -event init-fail [subst -nocommands {
	puts stderr "** DAP is not accessible, trying to acquire in Test Mode"
	if { ![mxs40v2::acquire_xres $_CHIPNAME.dap 0] } {
		puts stderr "** Target initialization failed (check connection, power, transport, DAP is enabled etc.)"
		terminate
	}
}]

${TARGET}.sysap configure -event examine-end [subst -nocommands {
		mxs40v2::display_chip_info $_CHIPNAME
}]

${TARGET}.sysap configure -event reset-assert {
	# This is the main Reset procedure, built-ins are overridden
	if { $::RESET_MODE eq "run" } {
		mxs40v2::toggle_xres
		return
	}

	mxs40v2::acquire_xres
# TODO: Keep it for a while, maybe WFA->TEST_MODE request will be implemented
# TODO: if { ![mxs40v2::acquire_xres] && ![mxs40v2::acquire_wfa $TEST_MODE_REQ_HERE] } {}
}

proc send_certificate {} {
	global DEBUG_CERTIFICATE
	global DEBUG_CERTIFICATE_ADDR

	if { ![file exists $DEBUG_CERTIFICATE]} {
		puts stderr "** Could not open certificate file '$DEBUG_CERTIFICATE'"
		error {}
	}

	if {![info exists DEBUG_CERTIFICATE_ADDR]} {
		set DEBUG_CERTIFICATE_ADDR 0x2000FC00
	}

	set sys_ap [find_core "sysap"]
	targets $sys_ap

	mxs40v2::acquire_wfa 2
	load_image $DEBUG_CERTIFICATE $DEBUG_CERTIFICATE_ADDR
	mww $::mxs40v2::SRSS_TST_DEBUG_CTL_ADDR 0

	sleep 50
	if {[using_jtag]} {
		# Workaround for PT-3096
		# JTAG pins gets disconnected momentarily when clearing WFA bit
		# causing invalid JTAG state when pins gets connected back to the
		# DAP by the boot code.
		sleep 600
	}

	set cm33_target [find_core "cm33"]
	targets $cm33_target

	if {[mxs40v2::wait_for_ap_open] == 0} {
		targets $sys_ap
		set boot_status [mxs40v2::decode_boot_status [mrw $::mxs40v2::RAM_BOOT_STATUS_ADDR]]
		puts stderr "** CM33 AP still closed, Boot Status: $boot_status"
		error {}
	}

	# Workaround for PT-3393, arp_examine fails sometimes, probably CPU is not
	# fully available right after sending the debug cert
	catch { $cm33_target arp_examine }
	catch { $cm33_target arp_poll }
	catch { $cm33_target arp_poll }
}

proc find_core { suffix } {
	set t [target current]
	set sep [string last "." $t]
	return [string range $t 0 [expr {$sep - 1}]].$suffix
}

${TARGET}.cm33ap configure -event examine-end {
	global DEBUG_CERTIFICATE

	set target [target current]
	set cm33_target [string map {cm33ap cm33} $target]
	set sysap_target [string map {cm33ap sysap} $target]

	if { ![mxs40v2::is_ap_open] } {
		if [info exists DEBUG_CERTIFICATE] {
			echo "** CM33 AP is closed, sending debug certificate"
			if [catch {send_certificate}] {
				puts stderr "** Error sending debug certificate, examination skipped"
				$cm33_target configure -defer-examine
				targets $sysap_target
				return
			}
		} else {
			puts stderr "** CM33 AP is closed and no certificate specified, examination skipped"
			puts stderr "** Use 'DEBUG_CERTIFICATE' variable to specify certificate filename with full path"
			$cm33_target configure -defer-examine
			targets $sysap_target
			return
		}
	}

	# make sure CM33 is examined without need for "reset init"
	if {[$cm33_target cget -defer-examine] == 0} {
		targets $cm33_target
		$cm33_target arp_examine
		$cm33_target arp_poll
		$cm33_target arp_poll
	}
}


###############################################################################
# SMIF (QSPI) flash bank
###############################################################################

# example of qspi_config.cfg
#set SMIF_BANKS {
#  0 {addr 0x60000000 size 0x10000 psize 0x100 esize 0x1000}
#  1 {addr 0x60010000 size 0x10000 psize 0x100 esize 0x1000}
#  2 {addr 0x60020000 size 0x10000 psize 0x100 esize 0x1000}
#  3 {addr 0x60030000 size 0x10000 psize 0x100 esize 0x1000}
#}

catch {source [find qspi_config.cfg]}
if { [info exists SMIF_BANKS] } {

	set num_banks [array size SMIF_BANKS]
	set bank_param ""
	if { $num_banks > 1 } {
		set bank_param "prefer_sector_erase"
	}

	# flash bank <bank_id> <driver_name> <base_address> <size_bytes> <chip_width_bytes> <bus_width_bytes> <target> [driver_options ...]
	# cmsis_flash driver options: <algorithm_elf> <stack_size> [prefer_sector_erase]
	foreach {key value} [array get SMIF_BANKS] {
		if { $value(addr) < 0x60000000 || [expr {$value(addr) + $value(size)}] > 0x68000000 } {
			puts stderr "** Flash bank ${_CHIPNAME}_smif${key}_cm33 crosses XIP address region!"
			continue
		}

		flash bank ${_CHIPNAME}_smif${key}_cm33 cmsis_flash $value(addr) $value(size) 4 4 ${TARGET}.cm33 $_QSPI_FLASHLOADER 0x800 {*}$bank_param
		add_verify_range ${TARGET}.cm33 $value(addr) $value(size)

		set virtual_addr [expr {$value(addr) - 0x5C000000}]
		flash bank ${_CHIPNAME}_smif${key}_cbus virtual $virtual_addr $value(size) 4 4 ${TARGET}.cm33 ${_CHIPNAME}_smif${key}_cm33
		add_verify_range ${TARGET}.cm33 $virtual_addr $value(size)
	}
}

gdb_smart_program enable

###############################################################################
# Target info
###############################################################################

proc check_flashboot_version {} {
# TODO: Implement check_flashboot_version. Check the same function in psoc6_common.cfg
}


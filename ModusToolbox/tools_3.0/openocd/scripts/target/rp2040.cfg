# SPDX-License-Identifier: GPL-2.0-or-later

transport select swd

adapter speed 2000

source [find target/swj-dp.tcl]

if { [info exists TARGET_SMP] } {
	set _TARGET_SMP $TARGET_SMP
} else {
	set _TARGET_SMP 1
}

if { [info exists DEBUG_MODE] } {
	set _DEBUG_MODE $DEBUG_MODE
} else {
	set _DEBUG_MODE launch
}

if { $_TARGET_SMP != 0 && $_TARGET_SMP != 1 } {
	puts stderr "Invalid TARGET_SMP value ($_TARGET_SMP), shoud be: 0, 1"
	shutdown
}

if { $_DEBUG_MODE != "launch" && $_DEBUG_MODE != "attach" } {
	puts stderr "Invalid DEBUG_MODE value ($_DEBUG_MODE), shoud be: launch, attach"
	shutdown
}

if { $_TARGET_SMP == 1 } {
	set _rtos_cmd "-rtos hwthread"
} else {
	set _rtos_cmd "-rtos auto"
}

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME rp2040
}

if { [info exists WORKAREASIZE] } {
	set _WORKAREASIZE $WORKAREASIZE
} else {
	set _WORKAREASIZE 0x10000
}

if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	set _CPUTAPID 0x01002927
}

swj_newdap $_CHIPNAME cpu -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap0 -chain-position $_CHIPNAME.cpu -dp-id $_CPUTAPID -instance-id 0
dap create $_CHIPNAME.dap1 -chain-position $_CHIPNAME.cpu -dp-id $_CPUTAPID -instance-id 1

target create $_CHIPNAME.cpu0 cortex_m -dap $_CHIPNAME.dap0 -coreid 0 {*}$_rtos_cmd
$_CHIPNAME.cpu0 configure -work-area-phys 0x20010000 -work-area-size $_WORKAREASIZE
cortex_m reset_config sysresetreq

target create $_CHIPNAME.cpu1 cortex_m -dap $_CHIPNAME.dap1 -coreid 1 {*}$_rtos_cmd
$_CHIPNAME.cpu1 configure -work-area-phys 0x20010000 -work-area-size $_WORKAREASIZE
cortex_m reset_config sysresetreq

if { $_DEBUG_MODE == "launch" } {
	$_CHIPNAME.cpu0 configure -event reset-init {rp2040 xip on}
	$_CHIPNAME.cpu0 configure -event gdb-attach {reset init}
	$_CHIPNAME.cpu1 configure -event gdb-attach {reset init}

	flash bank $_CHIPNAME.flash0 rp2040_flash 0x10000000 0 0 0 $_CHIPNAME.cpu0
	flash bank $_CHIPNAME.flash1 rp2040_flash 0x10000000 0 0 0 $_CHIPNAME.cpu1
} else {
	# Force HW breakpoints as Flash region is not exposed to the GDB
	gdb_breakpoint_override hard
}

if { $_TARGET_SMP } {
	target smp $_CHIPNAME.cpu0 $_CHIPNAME.cpu1
} else {
	$_CHIPNAME.cpu0 configure -event gdb-start {
		if {[$_CHIPNAME.cpu1 curstate] == "halted"} {
			targets $_CHIPNAME.cpu1
			resume
		}
	}

	$_CHIPNAME.cpu1 configure -event gdb-start {
		if {[$_CHIPNAME.cpu0 curstate] == "halted"} {
			targets $_CHIPNAME.cpu0
			resume
		}
	}
}

gdb_smart_program on
targets $_CHIPNAME.cpu0
